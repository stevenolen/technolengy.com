<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Derp-min</title>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://localhost:8080</link>
    <description>A sysadmin with a tendency to derp.</description>
    <pubDate>Sun, 23 Feb 2014 16:00:00 -0800</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>request-tracker4 sqlite woes</title>
      <link>http://localhost:8080/articles/rt4-sqlite-woes/</link>
      <pubDate>Sun, 23 Feb 2014 16:00:00 -0800</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/rt4-sqlite-woes/</guid>
      <author></author>
      <description>&lt;p&gt;My team has been using RT (or request-tracker4) as a ticketing system to manage incoming requests. As with most new system implementations in a group as small as mine is, we can hit the ground running and just make changes/adjust as needed.  This one made me a bit frustrated, so I figured I’d share in case it helped someone else.  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;When you install request-tracker4 using the ubuntu 12.04 packages, the packages by default use sqlite (which is fine, yadda yadda, since it’s easier to set up). The annoyance here is that RT doesn’t readily support version upgrades when using sqlite (only mysql and postgres). &lt;/p&gt;
&lt;p&gt;Well, we ended up with a good 6-8 months of usage on the sqlite db but now I wanted to upgrade to a newer version! Off to migrate the sqlite db to mysql.  While sql is sql, there are some distinct inconsistencies between sqlite and mysql, so dump-&amp;gt;import wouldn’t work (and, based on some searches, folks were having trouble with this conversion for RT specifically.  I wrote a little bash script to manage the process (so I could test on a clone of my vm, then perform on the live version).  It worked perfectly, so I’ll leave it below! &lt;/p&gt;
&lt;p&gt;I used a root account for this (in addition to a mysql root account, since the RT db init process was extremely temperamental), and don’t forget to change the RT_SiteConfig.pm file as suggested in the script! Some extra datatype conversions were necessary, since some sqlite columns supported NULL when the mysql equivalent did not.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;shebang&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;#converts a request-tracker 4.0.4 sqlite database to mysql&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;#run me as root, or adjust accordingly&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;####BEFORE RUNNING####&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;##edit /etc/request-tracker4/RT_SiteConfig.pm&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;##Set($DatabaseType, 'mysql');&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;##Set($DatabaseHost, 'localhost');&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;##Set($DatabasePort, '');&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;##Set($DatabaseUser , 'rt_user');&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;##Set($DatabasePassword , '{password}');&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;##Set($DatabaseName , 'rt_dbname');&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;#best to stop apache before running this, just so we can be sane about data usage.&lt;/span&gt;
service apache2 stop

&lt;span class=&quot;comment&quot;&gt;#create table list&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; tables=&lt;span class=&quot;string&quot;&gt;&quot;ACL
Articles
Attachments
Attributes
CachedGroupMembers
Classes
CustomFieldValues
CustomFields
GroupMembers
Groups
Links
ObjectClasses
ObjectCustomFieldValues
ObjectCustomFields
ObjectTopics
Principals
Queues
ScripActions
ScripConditions
Scrips
Templates
Tickets
Topics
Transactions
Users&quot;&lt;/span&gt;



&lt;span class=&quot;comment&quot;&gt;#init the rt mysql database, remove pre-created data, since we don't want it.&lt;/span&gt;
rt-setup-database --action init --dba root
&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$tables&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
    mysql -urt_user -p{password} rt_dbname &lt;span class=&quot;operator&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;delete from &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;#copy existing sqlite database (so we don't overwrite), file location based on installation method&lt;/span&gt;
mkdir -p /tmp/rt_sqlite
cp /var/lib/dbconfig-common/sqlite3/request-tracker4/rtdb /tmp/rt_sqlite/rtdb.sqlite


&lt;span class=&quot;comment&quot;&gt;#write our sqlite commands to a temporary file. notice the null commands at the beginning.&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;update Templates set TranslationOf=0 where TranslationOf is NULL;
update Tickets set IssueStatement=0 where IssueStatement is NULL;
update Tickets set Resolution=0 where Resolution is NULL;
update Transactions set TimeTaken=0 where TimeTaken is NULL;
update Tickets set InitialPriority=0 where InitialPriority is NULL;
update Tickets set FinalPriority=0 where FinalPriority is NULL;
update Tickets set TimeEstimated=0 where TimeEstimated is NULL;
update Tickets set TimeLeft=0 where TimeLeft is NULL;&quot;&lt;/span&gt; &amp;gt; /tmp/rt_sqlite/rt_sqlite.transactions

&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$tables&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;.output /tmp/rt_sqlite/data_&lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt; /tmp/rt_sqlite/rt_sqlite.transactions
    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;.mode insert &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt; /tmp/rt_sqlite/rt_sqlite.transactions
    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;select * from &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;;&quot;&lt;/span&gt; &amp;gt;&amp;gt; /tmp/rt_sqlite/rt_sqlite.transactions
&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;


&lt;span class=&quot;comment&quot;&gt;#export data from sqlite, separate file per table&lt;/span&gt;
sqlite3 /tmp/rt_sqlite/rtdb.sqlite &amp;lt; /tmp/rt_sqlite/rt_sqlite.transactions

&lt;span class=&quot;comment&quot;&gt;#finally, import the data to mysql&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `ls -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; /tmp/rt_sqlite/data_*`
&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; 
    mysql -urt_user -p{password} rt_dbname &amp;lt; &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;#let's start apache back up and cross our fingers!&lt;/span&gt;
service apache2 start
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    <item>
      <title>too much byobu!</title>
      <link>http://localhost:8080/articles/too-much-byobu/</link>
      <pubDate>Wed, 18 Sep 2013 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/too-much-byobu/</guid>
      <author></author>
      <description>&lt;p&gt;For the past few years, I’ve been using a screen/tmux replacement that I really like, called &lt;a href=&quot;http://byobu.co/&quot;&gt;byobu&lt;/a&gt;. 
It’s an absolutely fantastic tool, and one that should be looked at, if you’re not at least using screen or tmux (and 
perhaps even if you are using screen or tmux!) Here’s the thing though, byobu in byobu can be a real pain. &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;At $job recently, I was finally able to realize a long-planned situation: 
a single home directory per user on all of our servers (done via LDAP and NFS). After my first couple hours in this 
environment I noticed that byobu would try to launch itself each time I logged into a server (and often make my brain 
explode, when byobu runs in byobu, yadda yadda).&lt;/p&gt;
&lt;p&gt;It turns out there are a few ways to handle this.  The first (per &lt;a href=&quot;https://help.ubuntu.com/community/Byobu&quot;&gt;this&lt;/a&gt; 
ubuntu community help page) is to run this parameter when logging in to each host:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;ssh -t remotehost bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But seriously…that’s a pain.  It’s likely the best way to prevent byobu from running on most hosts is just to add 
a simple bash if statement to your .profile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; HOSTNAME=`hostname`
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; [ &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$HOSTNAME&lt;/span&gt;&quot;&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;host_where_byobu_should_run&quot;&lt;/span&gt; ]; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;
_byobu_sourced=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; . /usr/bin/byobu-launch
&lt;span class=&quot;keyword&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One thing to note is that this will probably break &lt;code&gt;byobu-enable&lt;/code&gt;… but who really needs that anyway!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>A place to dump my tales</title>
      <link>http://localhost:8080/articles/a-place-to-dump-my-tales/</link>
      <pubDate>Tue, 17 Sep 2013 17:00:00 -0700</pubDate>
      <guid isPermaLink="true">http://localhost:8080/articles/a-place-to-dump-my-tales/</guid>
      <author></author>
      <description>&lt;p&gt;It was suggested to me by a co-worker recently that I should blog some of my sysadmin-y findings. It’s unlikely that they are particularly show-stopping, or even novel at all…but they may be good as a reference!&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>